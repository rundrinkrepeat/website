import type { Config } from "@sveltejs/adapter-vercel";
import { error } from "@sveltejs/kit";

import { ICAL_URL, ISR_BYPASS_TOKEN } from "$env/static/private";

import type { RequestHandler } from "./$types";

export const config: Config = {
  isr: {
    // Expiration time (in seconds) before the cached asset will be re-generated by
    // invoking the Serverless Function. Setting the value to `false` means it will
    // never expire.
    expiration: 60 * 60,

    // Random token that can be provided in the URL to bypass the cached version of the
    // asset, by requesting the asset with a __prerender_bypass=<token> cookie.
    //
    // Making a `GET` or `HEAD` request with `x-prerender-revalidate: <token>` will
    // force the asset to be re- validated.
    bypassToken: ISR_BYPASS_TOKEN,
  },
};

export const GET: RequestHandler = async ({ fetch }) => {
  console.debug(`Fetching ical source from ${ICAL_URL}`);
  const ical_response = await fetch(ICAL_URL);
  if (!ical_response.ok) {
    throw error(503, `Invalid response from upstream calendar ${ical_response.status}`);
  }

  const ical = await ical_response.text();

  const response = new Response(ical, {
    headers: new Headers({
      "Content-Type": ical_response.headers.get("Content-Type") || "text/calendar",
    }),
  });
  return response;
};
